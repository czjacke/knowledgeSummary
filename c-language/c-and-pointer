1.预处理指令
预处理指令：预处理器根据预处理指令读入源代码替换到预处理指令出，然后将修改过的源代码递交给编辑器进行编译处理。
#include<stdio.h>
#define MAX_COLS 20


c语言中，所有传递给函数的参数都是按值传递的。
0代表假的，非0为真。


2、输入输出函数：
gets函数从标准输入读取一行文本并把它存储到数组中。一行输入由一串字符组成，以一个换行符结尾，gets函数会丢弃换行符，并在该行的末尾存储一个NUL字节(一个NUL字节是指字节模式为全0的字节，类似于“\0”这样的字符常量)，然后gets会返回一个非NULL的地址指针，表示成功读取，当gets函数被调用而没有读取到输入信息时，它会返回一个NULL值，表示到达输入的末尾（文件末尾）。

puts函数是gets函数的输出版本，它把指定的字符串写到标准输出并在末尾添加一个换行符。


scanf函数接收几个参数，其中第1个参数是一个格式字符串，用于藐视期望的输入类型。剩余几个参数都是变量，用于存储函数所读取的输入数据，该函数的返回值是函数成功转换并存储在参数中值的个数。scanf函数的所有标量参数的前面都必须要加上个"&"符号，而数组或者指针参数是不需要加这个符号的，scanf函数输入值之前的空白（空格、制表符、换行符等）会被跳过，值后面的空白表示该值的结结束。


getchar函数从标准输入读取一个字符并返回它的值，如果输入中不存在任何字符，函数就会返回常量EOF，用于提示文件的结尾。EOF是一个整形值，







C语言中的字符串是一串以NUL字符结尾的字符。NUL就是一个字符终止符，它本身并不被看做是字符串的一部分，但是，它要占用一个字节的存储空间。
NUL是ASCII字符集中“\0”字符的名字，它的字节全为0，而NULL是一个值为0的指针。NULL在头文件stdio.h中被定义。但是，并不存在预定义的NUL符号，如果想要使用它而不是字符串常量"\0"，需要自行定义。

3、初始化

定义的变量如果没有初始化，则变量的值是一个不可预料的值，如果是指针的话，则会有很多问题。






4、修饰符
const:用于申明变量，当使用这个修饰符声明的变量后，变量存储的值就不允许改变。
对常量的赋值有两种方式：
1、声明的时候就进行赋值
2、在函数中声明为const的形参在函数调用的时候得到实参的值。


5、环境编译执行
源文件 -> 编译（预处理 -》解析）-》目标代码（汇编 -》 二进制机器语言） -》连接器连接形成可执行文件（引入标准C语言函数库中任何被程序所使用到的函数，也可以将个人的程序库进行引用）

6、枚举类型
枚举类型就是指它的值为符号常量而不是字面值的类型，声明的方式如下：
enum Jar_Type {CUP ,PINT,CALLON}； //这条语句声明了一个类型，成为Jar_Type类型,CUP=0
使用 ：
enum Jar_Type milk_juc,gas_can,medicine_bootle;
如果某种特别的枚举类型的变量只是用一个声明，可以这样写：
enum {CUP ,PINT,CALLON} milk_juc ,gas_can, medicine_bootle;

enum Jar_Type {CUP = 8,PINT = 15,CALLON}//如果某个符号名未显示指定一个值，则它的值比前面一个符号的值大1。

符号名被当做常量处理，声明为枚举类型的变量实际上是整形类型。

6、字符串常量
在实际使用中，请尽量避免对字符串常量进行修改，如果需要修改字符串常量，请将字符串常量存储在数组中。
7、数组
数组实际代表的是一个地址；编译器并不对程序中数组的下标进行检查，因此有可能出现数组下标越界获取到其他地址里面的值。

8、指针
int  *a; //表示a是一个指针，同时表明 *a的结果类型是整数。
int  *a, *b ,*c //表示a,b,c是指针
int*  a，b ,c仅仅表示a为指针，b,c为整数

9、typedef 
用于为数据类型定义新的名字。
应该使用typedef来创建新的类型名，而不是使用define，因为define不能正确的处理指针类型。


10 作用域
代码块作用域、文件作用域、原型作用域、函数作用域
11连接属性(组成一个程序的各个源文件被编译后，所有的目标文件以及一个或多个函数库中引用的函数连接在一起，形成可执行程序)
external ,internal,none

11、操作符

.   //访问结构成员
->  //访问结构指针成员

*   间接访问
&   取地址
sizeof   获取类型的字节长度
12、
高级语音通过名字而不是地址来访问内存的位置，名字与位置之间的关联并不是硬件所提供的，而是由编译器所提供的。硬件通过地址访问内存位置。
许多机器以字节为单位存储整数，每一个字一般由2个或4个字节组成。比如，如果一个字包含了4个字节，它只有一个地址，至于地址是最左边还是最右边字节位置的地址，不同的机器有不同的规定。硬件边界对齐，在要求边界对齐的机器上，整型值存储的起始位置只能是某些特定的字节，通常是2或者4的倍数。