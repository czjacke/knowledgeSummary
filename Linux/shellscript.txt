#####shell script####
组合键功能与示范
[ctrl]+u/[ctrl]+k分别是从光标处向前删除指令串	（[ctrl]+u）	及向后删除指令串（[ctrl]+k）。[ctrl]+a/[ctrl]+e分别是让光标移动到整个指令串的最前面	（[ctrl]+a）	或最后面（[ctrl]+e）。




双引号内的特殊字符如$等，可以保有原本的特性，如下所示：	“var="lang	is$LANG"”则“echo	$var”可得“lang	is	zh_TW.UTF-8”
单引号内的特殊字符则仅为一般字符	（纯文本），如下所示：	“var='lang	is$LANG'”则“echo	$var”可得“lang	is	$LANG”
若该变量为扩增变量内容时，则可用	"$变量名称"	或	${变量}	累加内容，如下所示：“PATH="$PATH":/home/bin”或“PATH=${PATH}:/home/bin”
若该变量需要在其他子程序执行，则需要以	export	来使变量变成环境变量：	“exportPATH”
取消变量的方法为使用	unset	：“unset	变量名称”例如取消	myname	的设置：	“unsetmyname”




PATH="$PATH":/home/dmtsai/bin
PATH=${PATH}:/home/dmtsai/bin

cd /lib/modules/`uname -r`/kernel
cd /lib/modules/$（uname -r）/kernel

env
export 
set 

$:目前shell的线程代号（PID）
?:上个指令的回传值
目前个人计算机的 CPU 主要分为 32/64 位，其中 32 位又可分为 i386, i586, i686，而 64 位则称为 x86_64。
环境变量会被子程序继续引用；自定义变量不会被子程序继续应用。子程序仅会继承父程序的环境变量， 子程序不会继承父程序的自订变量啦
read -p "Please keyin your name: " -t 30 named

declare [-aixr] variable
选项与参数：
-a ：将后面名为 variable 的变量定义成为阵列 （array） 类型
-i ：将后面名为 variable 的变量定义成为整数数字 （integer） 类型
-x ：用法与 export 一样，就是将后面的 variable 变成环境变量；
-r ：将变量设置成为 readonly 类型，该变量不可被更改内容，也不能 unset

变量类型默认为“字串”，所以若不指定变量类型，则 1+2 为一个“字串”而不是“计算式”。所以上述第一个执行的结果才会出现那个情况的；
bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1/3 结果是 0；


在默认的情况下面， bash 对于变量有几个基本的定义：
1、变量类型默认为“字串”，所以若不指定变量类型，则 1+2 为一个“字串”而不是“计算式”。
2、bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1/3 结果是 0；


基本上，指令运行的顺序可以这样看：
1. 以相对/绝对路径执行指令，例如“ /bin/ls ”或“ ./ls ”；
2. 由 alias 找到该指令来执行；
3. 由 bash 内置的 （builtin） 指令来执行；
4. 通过 $PATH 这个变量的顺序搜寻到的第一个指令来执行。



