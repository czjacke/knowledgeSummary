#####shell script####
组合键功能与示范
[ctrl]+u/[ctrl]+k分别是从光标处向前删除指令串	（[ctrl]+u）	及向后删除指令串（[ctrl]+k）。[ctrl]+a/[ctrl]+e分别是让光标移动到整个指令串的最前面	（[ctrl]+a）	或最后面（[ctrl]+e）。




双引号内的特殊字符如$等，可以保有原本的特性，如下所示：	“var="lang	is$LANG"”则“echo	$var”可得“lang	is	zh_TW.UTF-8”
单引号内的特殊字符则仅为一般字符	（纯文本），如下所示：	“var='lang	is$LANG'”则“echo	$var”可得“lang	is	$LANG”
若该变量为扩增变量内容时，则可用	"$变量名称"	或	${变量}	累加内容，如下所示：“PATH="$PATH":/home/bin”或“PATH=${PATH}:/home/bin”
若该变量需要在其他子程序执行，则需要以	export	来使变量变成环境变量：	“exportPATH”
取消变量的方法为使用	unset	：“unset	变量名称”例如取消	myname	的设置：	“unsetmyname”




PATH="$PATH":/home/dmtsai/bin
PATH=${PATH}:/home/dmtsai/bin

cd /lib/modules/`uname -r`/kernel
cd /lib/modules/$（uname -r）/kernel

env
export 
set 

$:目前shell的线程代号（PID）
?:上个指令的回传值
目前个人计算机的 CPU 主要分为 32/64 位，其中 32 位又可分为 i386, i586, i686，而 64 位则称为 x86_64。
环境变量会被子程序继续引用；自定义变量不会被子程序继续应用。子程序仅会继承父程序的环境变量， 子程序不会继承父程序的自订变量啦
read -p "Please keyin your name: " -t 30 named

declare [-aixr] variable
选项与参数：
-a ：将后面名为 variable 的变量定义成为阵列 （array） 类型
-i ：将后面名为 variable 的变量定义成为整数数字 （integer） 类型
-x ：用法与 export 一样，就是将后面的 variable 变成环境变量；
-r ：将变量设置成为 readonly 类型，该变量不可被更改内容，也不能 unset

变量类型默认为“字串”，所以若不指定变量类型，则 1+2 为一个“字串”而不是“计算式”。所以上述第一个执行的结果才会出现那个情况的；
bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1/3 结果是 0；


在默认的情况下面， bash 对于变量有几个基本的定义：
1、变量类型默认为“字串”，所以若不指定变量类型，则 1+2 为一个“字串”而不是“计算式”。
2、bash 环境中的数值运算，默认最多仅能到达整数形态，所以 1/3 结果是 0；


基本上，指令运行的顺序可以这样看：
1. 以相对/绝对路径执行指令，例如“ /bin/ls ”或“ ./ls ”；
2. 由 alias 找到该指令来执行；
3. 由 bash 内置的 （builtin） 指令来执行；
4. 通过 $PATH 这个变量的顺序搜寻到的第一个指令来执行。



变量设置方式说明
${变量#关键字}
${变量##关键字}
若变量内容从头开始的数据符合“关键字”，则将符合的最短数据
删除 若变量内容从头开始的数据符合“关键字”，则将符合的最
长数据删除
${变量%关键字}
${变量%%关键字}
若变量内容从尾向前的数据符合“关键字”，则将符合的最短数据
删除 若变量内容从尾向前的数据符合“关键字”，则将符合的最
长数据删除
${变量/旧字串/新字串}
${变量//旧字串/新字串}
若变量内容符合“旧字串”则“第一个旧字串会被新字串取代” 若变
量内容符合“旧字串”则“全部的旧字串会被新字串取代”


变量设置方式str 没有设置str 为空字串str 已设置非为空字串
var=${str-expr} var=expr var= var=$str
var=${str:-expr} var=expr var=expr var=$str
var=${str+expr} var= var=expr var=expr
var=${str:+expr} var= var= var=expr
var=${str=expr} str=expr var=expr str 不变 var= str 不变 var=$str
var=${str:=expr} str=expr var=expr str=expr var=expr str 不变 var=$str
var=${str?expr} expr 输出至 stderr var= var=$str
var=${str:?expr} expr 输出至 stderr expr 输出至 stderr var=$str

shell.sh 文件必须要具备可读与可执行 （rx） 的权限
sh shell.sh 亦即告诉系统，我想要直接以 bash 的功能来执行 shell.sh 这个文件内的相关
指令的意思，所以此时你的 shell.sh 只要有 r 的权限即可被执行
利用 sh 的参数，如 -n 及 -x 来检查与追踪 shell.sh 的语法是否正确
chmod a+x hello.sh



利用 test 指令的测试功能
利用判断符号“ [ ] ”（就是中括号啦） 来进行数据的判断呢
在中括号 [] 内的每个元件都需要有空白键来分隔；
在中括号内的变量，最好都以双引号括号起来；
在中括号内的常数，最好都以单或双引号括号起来。


sh [-nvx] scripts.sh
选项与参数：
-n ：不要执行 script，仅查询语法的问题；
-v ：再执行 sccript 前，先将 scripts 的内容输出到屏幕上；
-x ：将使用到的 script 内容显示到屏幕上，这是很有用的参数！


script 的执行若以 source 来执行时，代表在父程序的 bash 内执行之意！
若需要进行判断式，可使用 test 或中括号 （ [] ） 来处理；

/path/to/scriptname opt1 opt2 opt3 opt4
$0 $1 $2 $3 $4
$# ：代表后接的参数“个数”，以上表为例这里显示为“ 4 ”；
$@ ：代表“ "$1" "$2" "$3" "$4" ”之意，每个变量是独立的（用双引号括起来）；
$* ：代表“ "$1<u>c</u>$2<u>c</u>$3<u>c</u>$4" ”，其中 <u>c</u> 为分隔字符，默
认为空白键， 所以本例中代表“ "$1 $2 $3 $4" ”之意。
shift：造成参数变量号码偏移

条件判断式
if [ 条件判断式 ]; then
当条件判断式成立时，可以进行的指令工作内容；
fi

# 一个条件判断，分成功进行与失败进行 （else）
if [ 条件判断式 ]; then
当条件判断式成立时，可以进行的指令工作内容；
else
当条件判断式不成立时，可以进行的指令工作内容；
fi




# 多个条件判断 （if ... elif ... elif ... else） 分多种不同情况执行
if [ 条件判断式一 ]; then
当条件判断式一成立时，可以进行的指令工作内容；
elif [ 条件判断式二 ]; then
当条件判断式二成立时，可以进行的指令工作内容；
else
当条件判断式一与二均不成立时，可以进行的指令工作内容；
fi

case $变量名称 in &lt;==关键字为 case ，还有变量前有钱字号
"第一个变量内容"） &lt;==每个变量内容建议用双引号括起来，关键字则为小括号 ）
程序段
;; &lt;==每个类别结尾使用两个连续的分号来处理！
"第二个变量内容"）
程序段
;;
*） &lt;==最后一个变量内容都会用 * 来代表所有其他值
不包含第一个变量内容与第二个变量内容的其他程序执行段
exit 1
;;
esac


while [ condition ] &lt;==中括号内的状态就是判断式
do &lt;==do 是循环的开始！
程序段落
done


until [ condition ]
do
程序段落
done



for var in con1 con2 con3 ...
do
程序段
done

for （（ 初始值; 限制值; 执行步阶 ））
do
程序段
done

				


