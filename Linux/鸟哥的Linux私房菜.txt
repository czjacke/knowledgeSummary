#鸟哥的私房菜

#精简指令级(Reduced Instruction Set Computer, RISC)
	微指令集较为精简，每个指令的执行时间都很短，完成的动作也很单纯，指令的执行性能较佳； 但是若要做复杂的事情，就要由多个指令来完成，比如PowerPc、ARM。
#复杂指令集（Complex Instruction Set Computer, CISC）
	复杂指令集每个小指令可以执行一些较低阶的硬件操作，指令数目多而且复杂，每条指令的长度并不相同。因为指令执行较为复杂所以每条指令花费的时间较长，但每条个别指令可以处理的工作较为丰富，比如X86。
	
#磁盘
/dev/sd[a-p]	


#文件系统与目录树的关系（挂载）
	“挂载”就是利用一个目录当成进入点，将磁盘分区的数据放置在该目录下； 也就是说，进入该目录就可以读取该分区。
	根目录一定需要挂载到某个分区的。
	默认的情况下，Linux是将光驱的数据放置到/media/cdrom里头去的。
	SATA硬盘：/dev/sd[a-d]
	CDROM：/dev/cdrom
	打印机：/dev/lp[0-2]
	软盘机：/dev/fd[0-1]
	
#时间
	date
	cal
Ctr+c  Ctr+d
[shift]+{[PageUP]|[Page Down]}按键翻页	

#查找指令
--help,man,/usr/share/doc/

#关机状态查看
如果要看目前有谁在线上，可以下达“who”
网络的连线状态，可以下达 “ netstat -a ”
看背景执行的程序可以执行“ ps -aux ”

#关机指令
将数据同步写入硬盘中的指令： sync
惯用的关机指令： shutdown
重新开机，关机： reboot, halt, poweroff

#文件权限
/etc/passwd    系统账号，一般身份使用者
/etc/shadow    个人密码
/etc/group     群组信息

su -
ls -al

第一个字符代表这个文件是“目录、文件或链接文件等等”：
当为[ d ]则是目录，例如上表文件名为“.config”的那一行；
当为[ - ]则是文件，例如上表文件名为“initial-setup-ks.cfg”那一行；
若是[ l ]则表示为链接文件（link file）；
若是[ b ]则表示为设备文件里面的可供储存的周边设备（可随机存取设备）；
若是[ c ]则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设
备）。
chgrp ：改变文件所属群组
	chgrp [-R] dirname/filename
	chgrp obsgrp root.war
chown ：改变文件拥有者
	chown [-R] 帐号名称 文件或目录
	chown [-R] 帐号名称:群组名称 文件或目录
	chown obs root.war
	chown obs:obsgrp root.war 
chmod ：改变文件的权限, SUID, SGID, SBIT等等的特性
	chmod [-R] xyz 文件或目录
	chmod u=rwx,g=rx,o=r filename
	chmod a-x .bashrc
	chmod a+x .bashrc
文件是实际含有数据的地方，包括一般文本文件、数据库内容档、二进制可可执行文件等。	


uname -a
lsb_release  -a


#目录配置

. 代表此层目录
.. 代表上一层目录
- 代表前一个工作目录
~ 代表“目前使用者身份”所在的主文件夹
~account 代表 account 这个使用者的主文件夹（account是个帐号名称）

cd：变换目录
pwd：显示目前的目录
mkdir：创建一个新的目录
rmdir：删除一个空的目录


cp(权限属性问题)  -a
	cp -a /etc /tmp
	cp -s bashrc bashrc_slink
	cp -l bashrc bashrc_hlink
rm
mv(移动文件与目录，或更名)

rename
basename
dirname


#文件

cat 由第一行开始显示文件内容
	cat -An filename
tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！
nl 显示的时候，顺道输出行号！

less 与 more 类似，但是比 more 更好的是，他可以往前翻页！
head 只看头几行
tail 只看尾巴几行
tail -f  filename
od 以二进制的方式读取文件内容！


touch
创建一个空的文件；
将某个文件日期修订为目前 （mtime 与 atime）

#文件默认权限
umask
#文件隐藏权限

chattr （设置文件隐藏属性）
chattr [+-=][ASacdistu] 文件或目录名称
lsattr （显示文件隐藏属性）
lsattr [-adR] 文件或目录


file 观察文件类型
文件的基本数据，例如是属于 ASCII 或者是 data 文件，或者是 binary， 且其中有没有使用到动态函数库 （share library） 等等的信息

##指令与文件的搜寻
which （寻找“可执行文件”）说明：根据“PATH”这个环境变量所规范的路径，去搜寻“可执行文件”的文件名
type   

whereis （由一些特定的目录中寻找文件文件名）

updatedb：根据 /etc/updatedb.conf 的设置去搜寻系统硬盘内的文件名，并更新
/var/lib/mlocate 内的数据库文件；
locate：依据 /var/lib/mlocate 内的数据库记载，找出使用者输入的关键字文件名。


find / -name "*passwd*"
find / -size +1M 找出系统中，大于 1MB 的文件
find /etc -size +50k -a -size -60M
find /etc -size +1500k -o -size 0  找出 /etc 下面，容量大于 1500K 以及容量等于 0 的文件：

总结：
搜寻指令的完整文件名可用 which 或 type ，这两个指令都是通过 PATH 变量来搜寻文件
名；
搜寻文件的完整文件名可以使用 whereis 找特定目录或 locate 到数据库去搜寻，而不实
际搜寻文件系统；
利用 find 可以加入许多选项来直接查询文件系统，以获得自己想要知道的文件名。


##文件系统
/dev/sd[a-p][1-128]：为实体磁盘的磁盘文件名
/dev/vd[a-d][1-128]：为虚拟磁盘的磁盘文件名

文件系统通常会将这两部份的数据分别存放在不同的区块，权限与属性放置到 inode 中，至于实际数据则放置到 data block 区块中。 另外，还有一个超级区块（superblock） 会记录整个文件系统的整体信息，包括 inode 与 block 的总量、使用量、剩余量等。
superblock：记录此 filesystem 的整体信息，包括inode/block的总量、使用量、剩余量，
以及文件系统的格式与相关信息等；inode：记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的 block号码；
block：实际记录文件的内容，若文件太大时，会占用多个 block 。


#
blkid &lt;==这个指令可以叫出目前系统有被格式化的设备
dumpe2fs 去查询任何文件系统
dumpe2fs [-bh] 设备文件名
xfs_info 挂载点


df：列出文件系统的整体磁盘使用量；
df -hT[a]
df -hT    /home

du：评估文件系统的磁盘使用量（常用在推估目录所占容量）
du -h --max-depth=2  /home

du -sh /*



ln [-sf] 来源文件 目标文件
选项与参数：
-s ：如果不加任何参数就进行链接，那就是hard link，至于 -s 就是symbolic link
-f ：如果 目标文件 存在时，就主动的将目标文件直接移除后再创建！

#磁盘分区挂载
lsblk 列出系统上的所有磁盘列表
lsblk -ip

blkid 列出设备的 UUID 等参数


MBR 分区表请使用 fdisk 分区， GPT 分区表请使用 gdisk 分区
要通过 lsblk 或 blkid 先找到磁盘，再用 parted /dev/xxx print 来找出内部的分区表类型，之后才用 gdisk 或 fdisk 来操作系统

XFS 文件系统 mkfs.xfs
EXT4 文件系统 mkfs.ext4

#文件系统的的挂载
1、单一文件系统不应该被重复挂载在不同的挂载点（目录）中；
2、单一目录不应该重复挂载多个文件系统；
3、要作为挂载点的目录，理论上应该都是空目录才是。

mount -a
mount [-l]
mount [-t 文件系统] LABEL='' 挂载点
mount [-t 文件系统] UUID='' 挂载点 # 鸟哥近期建议用这种方式喔！
mount [-t 文件系统] 设备文件名 挂载点





umount [-fn] 设备文件名或挂载点

#开机自动启动挂载点
vim /etc/fstab
开机自动挂载可参考/etc/fstab之设置，设置完毕务必使用 mount -a 测试语法正确否

#创建大文件
dd if=/dev/zero of=/srv/loopdev bs=1M count=512


如果磁盘已无未分区的容量，可以考虑使用大型文件取代磁盘设备的处理方式，通过 dd
与格式化功能。


#文件的压缩打包与备份
*.Z compress 程序压缩的文件；
*.zip zip 程序压缩的文件；
*.gz gzip 程序压缩的文件；
*.bz2 bzip2 程序压缩的文件；
*.xz xz 程序压缩的文件；
*.tar tar 程序打包的数据，并没有压缩过；
*.tar.gz tar 程序打包的文件，其中并且经过 gzip 的压缩
*.tar.bz2 tar 程序打包的文件，其中并且经过 bzip2 的压缩
*.tar.xz tar 程序打包的文件，其中并且经过 xz 的压


gzip, zcat/zmore/zless/zgrep
gzip 可以说是应用度最广的压缩指令了！目前 gzip 可以解开 compress, zip 与 gzip 等软件所压缩的文件。

bzip2, bzcat/bzmore/bzless/bzgrep

xz, xzcat/xzmore/xzless/xzgrep

tar 可以将很多文件“打包”成为一个文件，后来将整个 tar 与压缩的功能结合在一起。

压　缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称
查　询：tar -jtv -f filename.tar.bz2
解压缩：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录

dd 就是因为不理会文件系统， 单纯有啥纪录啥，因此不论该磁盘内的文件系统你是否认识，它都可以备份、还原的

dd if="input_file" of="output_file" bs="block_size" count="number

dd if=/etc/passwd of=/tmp/passwd.back



##vim编辑器

#区块选择
v  将光标经过的字符反白选择
V  将光标经过的列反白选择
Ctrl + v  以长方形的方式反白选择区块
y  将反白的地方复制起来
d  将反白的地方删除
p  将刚刚复制的区块，在光标所在的地方复制出来

#多窗口
键功能:sp[filename]打开一个新窗口，如果有加	filename，	表示在新窗口打开一个新文件，否则表示两个窗口为同一个文件内容（同步显示）。[ctrl]+w+	j[ctrl]+w+↓按键的按法是：先按下	[ctrl]	不放，	再按下	w	后放开所有的按键，然后再按下	j	（或向下方向键），则光标可移动到下方的窗口。[ctrl]+w+	k[ctrl]+w+↑同上，不过光标移动到上面的窗口。[ctrl]+w+q其实就是	:q	结束离开啦！	举例来说，如果我想要结束下方的窗口，那么利用	[ctrl]+w+↓	移动到下方窗口后，按下	:q	即可离开，	也可以按下[ctrl]+w+q	啊！

组合按钮补齐的内容[ctrl]+x	->	[ctrl]+n通过目前正在编辑的这个“文件的内容文字”作为关键字，予以补齐[ctrl]+x	->	[ctrl]+f以当前目录内的“文件名”作为关键字，予以补齐[ctrl]+x	->	[ctrl]+o以扩展名作为语法补充，以	vim	内置的关键字，予以补齐

#环境参数设置
vim	的环境设置参数
:set	nu	:set	nonu就是设置与取消行号啊！
:set	hlsearch	:setnohlsearchhlsearch	就是	high	light	search（高亮度搜寻）。	这个就是设置是否将搜寻的字串反白的设置值。默认值是	hlsearch
:set	ruler还记得我们提到的右下角的一些状态列说明吗？	这个	ruler	就是在显示或不显示该设置值的啦！
:syntax	on	:syntaxoff是否依据程序相关语法显示不同颜色？	举例来说，在编辑一个纯文本文件时，如果开头是以	#	开始，那么该列就会变成蓝色。	如果你懂得写程序，那么这个	:syntax	on	还会主动的帮你除错呢！但是，	如果你仅是编写纯文本，要避免颜色对你的屏幕产生的干扰，则可以取消这个设置	。


可以使用	iconv	进行文件语系编码的转换

使用	dos2unix	及	unix2dos	可以变更文件每一列的行尾断行字符。



history -w 立刻将目前的数据写入 histfile 当中


source 配置文件文件名
source 或小数点 （.） 都可以将配置文件的内容读进来目前的 shell 环境中

Ctrl + C 终止目前的命令
Ctrl + D 输入结束 （EOF），例如邮件结束的时候；


bash 符号意义
* 代表“ 0 个到无穷多个任意字符"
? 代表“一定有一个任意字符"
[ ] 同样代表“一定有一个在括号内”的字符（非任意字符）。例如 [abcd] 代表“一定有一个字符， 可能是 a, b, c, d 这四个任何一个”
[-] 若有减号在中括号内时，代表“在编码顺序内的所有字符”。例如 [0-9] 代表 0 到 9 之间的所有数字，因为数字的语系编码是连续的！
[^]若中括号内的第一个字符为指数符号 （^） ，那表示“反向选择”，例如 [^abc] 代表一定有一个字符，只要是非 a, b, c 的其他字符就接受的意思。


; 连续指令下达分隔符号：连续性命令的界定 （注意！与管线命令并不相同）
$ 取用变量前置字符：亦即是变量之前需要加的变量取代值
& 工作控制 （job control）：将指令变成背景下工作
>, >> 数据流重导向：输出导向，分别是“取代”与“累加”
<, << 数据流重导向：输入导向 （这两个留待下节介绍）
' ' 单引号，不具有变量置换的功能 （$ 变为纯文本）
" " 具有变量置换的功能！ （$ 可保留相关功能）
``两个“ ` ”中间为可以先执行的指令，亦可使用 $（ ）

1. 标准输入　　（stdin） ：代码为 0 ，使用 < 或 << ；将原本需要由键盘输入的数据，改由文件内容来取代
2. 标准输出　　（stdout）：代码为 1 ，使用 > 或 >> ；
3. 标准错误输出（stderr）：代码为 2 ，使用 2> 或 2>> ；
/dev/null 垃圾桶黑洞设备与特殊写法



find /home -name  xxx  > list 2>$1

cmd ; cmd （不考虑指令相关性的连续指令下达）
$? （指令回传值） 与 && 或 ||
cmd1&&cmd2
1. 若 cmd1 执行完毕且正确执行（$?=0），则开始执行 cmd2。 2. 若 cmd1
执行完毕且为错误 （$?≠0），则 cmd2 不执行。
cmd1 ||cmd2
1. 若 cmd1 执行完毕且正确执行（$?=0），则 cmd2 不执行。 2. 若 cmd1 执
行完毕且为错误 （$?≠0），则开始执行 cmd2。

#文本显示
less, more, head, tail 等都是可以接受 standard input 的管线命令啦
管线命令仅会处理 standard output，对于 standard error output 会予以忽略
管线命令必须要能够接受来自前一个指令的数据成为 standard input 继续处理才行。

#文本处理
grep [-acinv] [--color=auto] '搜寻字串' filename
选项与参数：
-a ：将 binary 文件以 text 文件的方式搜寻数据
-c ：计算找到 '搜寻字串' 的次数
-i ：忽略大小写的不同，所以大小写视为相同
-n ：顺便输出行号
-v ：反向选择，亦即显示出没有 '搜寻字串' 内容的那一行！
--color=auto ：可以将找到的关键字部分加上颜色的显示喔！



sort [-fbMnrtuk] [file or stdin]
选项与参数：
-f ：忽略大小写的差异，例如 A 与 a 视为编码相同；
-b ：忽略最前面的空白字符部分；
-M ：以月份的名字来排序，例如 JAN, DEC 等等的排序方法；
-n ：使用“纯数字”进行排序（默认是以文字体态来排序的）；
-r ：反向排序；
-u ：就是 uniq ，相同的数据中，仅出现一行代表；
-t ：分隔符号，默认是用 [tab] 键来分隔；
-k ：以那个区间 （field） 来进行排序的意思



uniq [-ic]
选项与参数：
-i ：忽略大小写字符的不同；
-c ：进行计数


wc [-lwm]
选项与参数：
-l ：仅列出行；
-w ：仅列出多少字（英文单字）；
-m ：多少字符；


tee 会同时将数据流分送到文件去与屏幕 （screen）；而输出到屏幕的，其实就是 stdout
tee [-a] file
选项与参数：
-a ：以累加 （append） 的方式，将数据加入 file 当中！


DOS 断行字符与 Unix 断行字符的不同，并且可以使用dos2unix 与 unix2dos 来完成转
tr 可以用来删除一段讯息当中的文字，或者是进行文字讯息的替换！
col 将 [tab] 按键取代成为空白键
join 看字面上的意义 （加入/参加） 就可以知道，他是在处理两个文件之间的数据， 而且，主要是在处理“两个文件当中，有 "相同数据"的那一行，才将他加在一起”的意思

paste 就直接“将两行贴在一起，且中间以 [tab] 键隔开
expand 将 [tab] 按键转成空白键

split 可以将大文件分成小文件
split [-bl] file PREFIX
选项与参数：
-b ：后面可接欲分区成的文件大小，可加单位，例如 b, k, m 等；
-l ：以行数来进行分区。
PREFIX ：代表前置字符的意思，可作为分区文件的前导文字。

ls -al / |split -l 10 - isroot
# 重点在那个 - 啦！一般来说，如果需要 stdout/stdin 时，但偏偏又没有文件，
# 有的只是 - 时，那么那个 - 就会被当成 stdin 或 stdout ～


xargs 可以读入 stdin 的数据，并且以空白字符或断行字符作为分辨，将 stdin 的数据分隔成为 arguments
xargs [-0epn] command
选项与参数：
-0 ：如果输入的 stdin 含有特殊字符，例如 `, \, 空白键等等字符时，这个 -0 参数
可以将他还原成一般字符。这个参数可以用于特殊状态喔！
-e ：这个是 EOF （end of file） 的意思。后面可以接一个字串，当 xargs 分析到这个字串时，
就会停止继续工作！
-p ：在执行每个指令的 argument 时，都会询问使用者的意思；
-n ：后面接次数，每次 command 指令执行时，要使用几个参数的意思。
当 xargs 后面没有接任何的指令时，默认是以 echo 来进行输出喔！
会使用 xargs 的原因是， 很多指令其实并不支持管线命令，因此我们可以通过 xargs 来提供该指令引用 standard input 



-
在管线命令当中，常常会使用到前一个指令的 stdout作为这次的 stdin ， 某些指令需要用到文件名称 （例如 tar） 来进行处理时，该 stdin 与stdout 可以利用减号 "-" 来替代。

type 可以用来找到执行指令为何种类型，亦可用于与 which 相同的功能；




#文件对比
diff用来对比文本
cmp用来比较文本字节

netstat   查看打开的网络服务端口


#群组、权限管理
初始群主、有效群主

查看用户支持的群主
groups: 有效与支持群组的观察  
有效群主的切换
newgrp: 有效群组的切换

root 用户使用usermod 帮助用户加入群组
gpasswd 群主管理员使用这个命令帮助用户加入群组
useradd 用户  增加用户
passwd 用户  给用户设置密码
id 这个指令则可以查询某人或自己的相关 UID/GID 等等的信息


以“ su - ”直接将身份变成 root 即可，但是这个指令却需要 root 的密码，也就是说，如果
你要以 su 变成 root 的话，你的一般使用者就必须要有 root 的密码才行；
以“ sudo 指令 ”执行 root 的指令串，由于 sudo 需要事先设置妥当，且 sudo 需要输入使
用者自己的密码， 因此多人共管同一部主机时， sudo 要比 su 来的好喔！

若要完整的切换到新使用者的环境，必须要使用“ su - username ”或“ su -l username ”，
才会连同 PATH/USER/MAIL 等变量都转成新使用者的环境；
如果仅想要执行一次 root 的指令，可以利用“ su - -c "指令串" ”的方式来处理；
使用 root 切换成为任何使用者时，并不需要输入新使用者的密码；


，sudo 执行的重点是：“能否使用 sudo 必须要看 /etc/sudoers 的设置值， 而可使用
sudo 者是通过输入使用者自己的密码来执行后续的指令串

sudo su - ”并且输入“自己的
密码”后， 立刻变成 root 的身份！不但 root 密码不会外流，使用者的管理也变的非常方便！(前提是root配置了用户能执行的权限，也就是/etc/sudoers里面的配置)

身份切换可使用 su ，亦可使用 sudo ，但使用 sudo 者，必须先以 visudo 设置可使用的指令

#PAM
系统账号:nologin，它的shell就是/sbin/nologin,它不需要登录。

PAM 可以说是一套应用程序接口 （Application Programming Interface, API），他提供了一
连串的验证机制，只要使用者将验证阶段的需求告知 PAM 后， PAM 就能够回报使用者验证
的结果 （成功或失败）

当前shell登录者
id
目前已登陆在系统上面的使用者
w/who
列出从系统创建之后到目前为止的所有登陆者信息
last
每个帐号的最近登陆的时间
lastlog

write:对特定的使用者下达信息
mesg n / mesg y
wall:群发消息




#磁盘管理
文件系统主要规划为存放属性的 inode 与实际文件数据的 block 区块
限制 inode 用量：可以管理使用者可以创建的“文件数量”；
限制 block 用量：管理使用者磁盘容量的限制，


#RAID
RAID-0 （等量模式, stripe）性能最佳
对磁盘进行等量的区块（trunk）切割。当一个文件要写入RAID0时，该文件会依据 chunk 的大小切割好，之后再依序放到各个磁盘里面去。
优点：数据被分散给多个磁盘进行存储，提高了数据存储的并发性。
缺点：数据损毁的风险增大。

RAID-1 （映射模式, mirror）：完整备份
让同一份数据，完整的保存在两颗磁盘上
优点：数据的备份
缺点：写入性能不佳，磁盘利用率低。

RAID 1+0，RAID 0+1


RAID 5：性能与数据备份的均衡考虑
RAID-5 至少需要三颗以上的磁盘才能够组成这种类型的磁盘阵列。这种磁盘阵列的数据写入
有点类似 RAID-0 ， 不过每个循环的写入过程中 （striping），在每颗磁盘还加入一个同位检
查数据 （Parity） ，这个数据会记录其他磁盘的备份数据， 用于当有磁盘损毁时的救援。并且记录
的同位检查码每次都记录在不同的磁盘
在读写性能的比较上，读取的性能还不赖！与 RAID-0 有的比！不过写的性能就不见得能够增
加很多！ 这是因为要写入 RAID 5 的数据还得要经过计算同位检查码 （parity） 的关系。由
于加上这个计算的动作， 所以写入的性能与系统的硬件关系较大！



RAID 6 ，这个 RAID 6 则使用两颗磁盘的容量作为 parity 的储存，因此整体的磁盘容量就会
少两颗，但是允许出错的磁盘数量就可以达到两颗了！ 也就是在 RAID 6 的情况下，同时两
颗磁盘损毁时，数据还是可以救回来！
Spare Disk：



项目					RAID0					RAID1					RAID10					RAID5					RAID6
最少磁盘数				2						2 						4 						3 						4
最大容错磁盘数			无						n-1						n/2						1						2
数据安全性				完全没有				最佳					最佳					好						比RAID5好
理论写入性能			n 						1 						n/2 					<n-1 					<n-2
理论读出性能			n 						n 						n 						<n-1 					<n-2
可用容量				n 						1 						n/2 					n-1 					n-2
一般应用				强调性能但数据不		数据与备份				服务器、云系统常用		数据与备份				数据与备份
						重要的环境
因为 RAID5, RAID6 读写都需要经过 parity 的计算机制，因此读/写性能都不会刚好满足于使用的磁盘数量喔



磁盘的disk/partion(磁盘/分区)block（块）,trunk（分块）,stripe（条带）




fdisk -l

lsblk

blkid /dev/vda

dd if=/dev/zero of=/dev/md0 bs=1M count=50



1、对磁盘分区
2、对分区的磁盘格式化（创建文件系统）
3、挂载格式化的分区

LVM 与RAID是两种不同的模式

LVM 的重点在于“可以弹性的调整 filesystem 的容量,LVM 可以整合多个实体,partition 在一起， 让这些 partitions 看起来就像是一个磁盘一样，而且，还可以在未来新增或
移除其他的实体 partition 到这个 LVM 管理的磁盘当中。


LVM 的作法是将几个实体的
partitions （或 disk） --（pv）通过软件组合成为一块看起来是独立的大磁盘 （VG） ，然后将这块大
磁盘再经过分区成为可使用分区 （LV）， 最终就能够挂载使用了



LVM 大磁盘就是将许多 PV 整合成这个 VG 的东西，VG 就是 LVM 组合
起来的大磁盘，VG 还会被切成 LV，这个 LV 就是最后可以被格式化使用的类似分区的咚咚，PE 是整个 LVM 的最小储存单位，那么 LV的大小就与在此 LV 内的 PE 总数有关。LVM 默认使用 4MB 的 PE 区块，而 LVM 的 LV 在 32 位系统上最多仅能含有 65534 个 PE
（lvm1 的格式），因此默认的 LVM 的 LV 会有 4M*65534/（1024M/G）=256G，PE 就有点像文件系统里面的 block 大小。

partitions/disk(PV)  -->VG --> LV --> PV

lsblk, blkid  mkfs.xfs  df, mount umount


#背景执行
at 工作调度的使用上，系统会将该项 at 工作独立出你的 bash 环境中， 直接交给系统的
atd 程序来接管，因此，当你下达了 at 的工作之后就可以立刻离线了， 剩下的工作就完全交
给 Linux 管理即可


利用 atq 来查询，利用 atrm 来删除错误的指令，利用 at 来直接下达单一工
作调度

batch：系统有空时才进行背景任务，batch 是利用 at 来进行指令的下达啦！只是加入一些控制参数而已。这个 batch 神奇的
地方在于：他会在 CPU 的工作负载小于 0.8 的时候，才进行你所下达的工作任务


CPU的使用率与CPU工作负载的概念，如果有一个任务在执行，则工作负载为1，CPU的使用率为100%，如果有两个任务在执行，则工作负载为2，CPU的使用率任然为100%。工作负载越大，CPU执行的任务也就越多，因此CPU进行上下文环境的切换也就越频繁，CPU也就越繁忙。


#显示工作负载
uptime

#找出背景工作
jobs


相对于 at 是仅执行一次的工作，循环执行的例行性工作调度则是由 cron（crond） 这个系统
服务来控制的，对应的控制例行性工作调度的指令 （crontab）。




#父程序、子程序
当我们登陆并执行 bash 时，系统已经给我们一个 PID 了，这个 PID 就是依据登
陆者的 UID/GID （/etc/passwd） 来的啦～以上面的图 16.1.2 配合图 16.1.1 来做说明的话，
我们知道 /bin/bash 是一个程序 （program），当 dmtsai 登陆后，他取得一个 PID 号码为
2234 的程序，这个程序的 User/Group 都是 dmtsai ，而当这个程序进行其他作业时，例如上
面提到的 touch 这个指令时， 那么由这个程序衍生出来的其他程序在一般状态下，也会沿用
这个程序的相关权限的

当我
们登陆系统后，会取得一个 bash 的 shell ，然后，我们用这个 bash 提供的接口去执行另一
个指令，例如 /usr/bin/passwd 或者是 touch 等等，那些另外执行的指令也会被触发成为 PID
，呵呵！那个后来执行指令才产生的 PID 就是“子程序”了，而在我们原本的 bash 环境下，就
称为“父程序”了



ps -l 可以查阅到相关的程序信息
ps aux
ps -ef
一个是只能查阅自己 bash 程序的“
ps -l ”一个则是可以查阅所有系统运行的程序“ ps aux ”,使用 ps -l 则仅列出与你的操作环境 （bash） 有关
的程序而已， 亦即最上层的父程序会是你自己的 bash 而没有延伸到 systemd

系统先以 fork 的方式复制一个与父程序相同的暂存程序，这个程序与父程序唯一的差别
就是 PID 不同！ 但是这个暂存程序还会多一个 PPID 的参数，PPID 如前所述，就是父程序
的程序识别码啦！然后（2）暂存程序开始以 exec 的方式载入实际要执行的程序

在 Linux 下面执行一个指令时，系统会将相关的权限、属性、程序码
与数据等均载入内存， 并给予这个单元一个程序识别码 （PID），最终该指令可以进行的任
务则与这个 PID 的权限有关。


登陆 bash 之后， 就是取得
一个名为 bash 的 PID 了，而在这个环境下面所执行的其他指令， 就几乎都是所谓的子程序
了。

命令 &  //表示执行背景任务
nohup
atd
crontab
batch

背景有终端机背景和系统背景
#背景工作可以bg/fg 调用该

fg/bg/jobs
直接将指令丢到背景中“执行”的 &
将“目前”的工作丢到背景中“暂停”：[ctrl]-z
将背景工作拿到前景来处理：fg
让工作在背景下的状态变成运行中： bg
管理背景当中的工作： kill


工作管理当中提到的“背景”指的是在终端机模式下可以避免 [crtl]-c 中断
的一个情境， 你可以说那个是 bash 的背景，并不是放到系统的背景去喔！所以，工作管理
的背景依旧与终端机有关啦！ 在这样的情况下，如果你是以远端连线方式连接到你的 Linux
主机，并且将工作以 & 的方式放到背景去， 请问，在工作尚未结束的情况下你离线了，该工
作还会继续进行吗？答案是“否”！不会继续进行，而是会被中断掉。

那怎么办？如果我的工作需要进行一大段时间，我又不能放置在背景下面，那该如何处理
呢？ 首先，你可以参考前一章的 at 来处理即可！因为 at 是将工作放置到系统背景， 而与终
端机无关。如果不想要使用 at 的话，那你也可以尝试使用 nohup 这个指令来处理喔！这个
nohup 可以让你在离线或登出系统后，还能够让工作继续进行

nohup 并不支持 bash 内置的指令，因此你
的指令必须要是外部指令才行。
nohup ./sleep500.sh &



ps/top/pstree


造成僵尸程序的成因
是因为该程序应该已经执行完毕，或者是因故应该要终止了， 但是该程序的父程序却无法完
整的将该程序结束掉，而造成那个程序一直存在内存当中


通常僵尸程序都已经无法控管，而直接是交给 systemd 这支程序来负责了，偏偏
systemd 是系统第一支执行的程序， 他是所有程序的父程序！我们无法杀掉该程序的 （杀掉
他，系统就死掉了！），所以啰，如果产生僵尸程序， 而系统过一阵子还没有办法通过核心
非经常性的特殊处理来将该程序删除时，那你只好通过 reboot 的方式来将该程序抹去了！


，所有的程序都是依附在 systemd 这支程序下面
的！ 仔细看一下，这支程序的 PID 是一号喔！因为他是由 Linux 核心所主动调用的第一支程
序！所以 PID 就是一号了。 这也是我们刚刚提到僵尸程序时有提到，为啥发生僵尸程序需要
重新开机？ 因为 systemd 要重新启动，而重新启动 systemd 就是 reboot


使用 kill -l

kill -signal PID
或者
kill -signal %jobnumber
（小写的 L ） 或者是 man 7 signal 都可以查询到signal

killall -signal 指令名称
free ：观察内存使用情况
uname：查阅系统与核心相关信息
uptime：观察系统启动时间与工作负载
netstat ：追踪网络或插槽档,netstat 的输出分为两大部分，
分别是网络与系统自己的程序相关性部分：
dmesg ：分析核心产生的讯息
vmstat 可以侦测“ CPU / 内存 / 磁盘输入输出状态

查询整个系统的 SUID/SGID 的文件
find / -perm /6000
内存当中的数据又都是写入到
/proc/* 这个目录下的

find / -perm /6000
开机所执行的第一支程序 systemd 他的 PID 是 1 ， 这个 PID 的所有相关信息都写入在
/proc/1/* 当中


fuser 我们可以找出使用该文件、目录的程序
lsof ：列出被程序所打开的文件文件名
pidof ：找出某支正在执行的程序的 PID



#服务service     daemon

服务的启动、关闭与观察等方式： 所有的服务启动脚本通通放置于 /etc/init.d/ 下面，基 
本上都是使用 bash shell script 所写成的脚本程序，需要启动、关闭、重新启动、观察状
态时， 可以通过如下的方式来处理：
启动：/etc/init.d/daemon start
关闭：/etc/init.d/daemon stop
重新启动：/etc/init.d/daemon restart
状态观察：/etc/init.d/daemon status



服务启动的分类： init 服务的分类中，依据服务是独立启动或被一只总管程序管理而分为
两大类：
独立启动模式 （stand alone）：服务独立启动，该服务直接常驻于内存中，提供本
机或用户的服务行为，反应速度快。
总管程序 （super daemon）：由特殊的 xinetd 或 inetd 这两个总管程序提供 socket
对应或 port 对应的管理。当没有用户要求某 socket 或 port 时， 所需要的服务是不
会被启动的。若有用户要求时， xinetd 总管才会去唤醒相对应的服务程序。当该要
求结束时，这个服务也会被结束掉～ 因为通过 xinetd 所总管，因此这个家伙就被称
为 super daemon。好处是可以通过 super daemon 来进行服务的时程、连线需求等
的控制，缺点是唤醒服务需要一点时间的延迟。

默认要启动： chkconfig daemon on
默认不启动： chkconfig daemon off
观察默认为启动否： chkconfig --list daemon

init 主要的功能都写在上头了，重要的指令包括 daemon 本身自己的脚本
（/etc/init.d/daemon） 、xinetd 这个特殊的总管程序 （super daemon）、设置默认开机启动
的 chkconfig， 以及会影响到执行等级的 init N 等



基本上， systemd 这个启动服务的机制，主要是通过一只名为 systemctl 的指令来处理的,跟以前 systemV 需要 service / chkconfig / setup / init 等指令来协助不同， systemd 就是仅有systemctl 这个指令来处理而已


systemctl [command] [unit]
command 主要有：
start ：立刻启动后面接的 unit
stop ：立刻关闭后面接的 unit
restart ：立刻关闭后启动后面接的 unit，亦即执行 stop 再 start 的意思
reload ：不关闭后面接的 unit 的情况下，重新载入配置文件，让设置生效
enable ：设置下次开机时，后面接的 unit 会被启动
disable ：设置下次开机时，后面接的 unit 不会被启动
status ：目前后面接的这个 unit 的状态，会列出有没有正在执行、开机默认执行否、登录等信息等！
is-active ：目前有没有正在运行中
is-enable ：开机时有没有默认要启用这个 unit



不应该使用 kill 的方式来关掉一个
正常的服务喔！否则 systemctl 会无法继续监控该服务的